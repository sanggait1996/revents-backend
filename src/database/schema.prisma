// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SEX {
  MALE
  FEMALE
  OTHER
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  password String
  photoURL String?
  name     String?
  gender   SEX?
  events   Event[] @relation("attendees")

  hostedEvents Event[]   @relation("host")
  photos       File[]
  comments     Comment[]
  following    User[]    @relation("userFollows")
  followers    User[]    @relation("userFollows")
}

model Location {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  city   String
  venue  String
  events Event[]
}

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  date        DateTime @db.Date
  description String?
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId  String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  attendees   User[]   @relation("attendees")
  isCancelled Boolean  @default(false)

  host     User      @relation("host", fields: [hostId], references: [id])
  hostId   String
  comments Comment[]
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  value  String
  events Event[]
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url          String
  filename     String
  originalName String
  mimetype     String
  publicId     String @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text     String
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  event    Event     @relation(fields: [eventId], references: [id])
  eventId  String
  parentId String?
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  comments Comment[] @relation("CommentToComment")
}
